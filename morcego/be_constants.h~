
/*
    <C/C++ source code of the support dlls>    
    Copyright (C) <2020>  <BinaryWork Corp.>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU GENERAL PUBLIC LICENSE
	and GNU LESSER GENERAL PUBLIC LICENSE along with this program.  
	If not, see <http://www.gnu.org/licenses/>.
    
    support: http://nomade.sourceforge.net
    
	direct programmers e-mails:
	Ricardo: arsoftware25@gmail.com
	Amanda : arsoftware10@gmail.com
	
	immediate contact(for a very fast answer) WhatsApp
	(+55)41 9627 1708 - it is always on
*/
 
#include "../mv_from_be.h"
 
#ifndef BE_CONSTANTS___
#define BE_CONSTANTS___
typedef struct morcego_property_bag_
{
					__int64 int64_1;
					__int64 int64_2;
					__int64 int64_3;
					__int64 int64_4;
					__int64 int64_5;
					double double_1;
					double double_2;
					double double_3;
					double double_4;
					double double_5;
					char string_1[1024];
					char string_2[1024];
					char string_3[1024];
					char string_4[1024];
					char string_5[1024];
					void*ptr;					
} morcego_property_bag;
 
enum morcego_decoder_constants
{

  BE_INITIAL_STATE,
  BE_DECODED,
  BE_DECODED_BUT_NO_MORE_SAMPLES_AVAILABLE,
  BE_ERROR_DURING_DECODE,
  BE_DECODER_NOT_LOADED,

};

enum morcego_decoder_state
{
  BE_STATE_DECODING,
  BE_STATE_NO_MORE_SAMPLES,
  BE_STATE_DECODER_FAILURE,
};

typedef struct be_libav_struct_
{
	morcego_property_bag property_bag;
	char sourcefile[1024];
	int be_channels;
	int be_samplerate;
	int be_bits_per_sample;
	double be_seconds;
	__int64 be_size_of_pcm_data;
	__int64 be_samples;
	char be_error_message[1024];
	char be_codec_name[1024];
	char be__magic_value__format_name[1024];
	char be_media_information[1024];
	int is_vbr;
	char be_mpeg[300];
	char be_layer[300];
	char be_mode[300];
	int be_bitrate;
	int is_mpeg;
	int sample_format;
	double length;
	double mp3_sizeofdata;
	double mp3_adjust;
	__int64 track_to_play_or_decode;	
	unsigned int internal_play_as_mp3___:1;
	unsigned int internal_replaygain_fast_mode:2;
	
} be_libav_struct;//the definitive audio struct

int morcego_decode_libav (morcego___i___instance__a__bucaneiro_engineering *mv_______,int bytes_to_decode, char *bufout, int *size_out);
int morcego_init_libav (morcego___i___instance__a__bucaneiro_engineering *mv_______,be_libav_struct * be_data, int morcego_is_mp3);
void morcego_deinit_libav (morcego___i___instance__a__bucaneiro_engineering *mv_______);
void morcego_seek_100_libav (morcego___i___instance__a__bucaneiro_engineering *mv_______,double valor);
char *get_morcego_interface_version (morcego___i___instance__a__bucaneiro_engineering *mv_______);

void deinit2 (morcego___i___instance__a__bucaneiro_engineering *mv_______);
int init_decoder2 (morcego___i___instance__a__bucaneiro_engineering *mv_______,be_libav_struct *be_data);
int decode2 (morcego___i___instance__a__bucaneiro_engineering *mv_______,char *buf, int *size_out);
void seek2(morcego___i___instance__a__bucaneiro_engineering *mv_______,double value);
int get_number_of_audio_tracks(morcego___i___instance__a__bucaneiro_engineering *mv_______,char*utf8_filename, char*error_message);
int get_number_of_audio_tracks_internal(morcego___i___instance__a__bucaneiro_engineering *mv_______,char*utf8_filename, char*error_message);

void
morcego_extract_wav_extended
(
morcego___i___instance__a__bucaneiro_engineering *mv_______,
        char *filename,
        char *out_wav_file,
        int wav_mode,
                int track
)
;
int
morcego_extract_wav (morcego___i___instance__a__bucaneiro_engineering *mv_______,char *filename, char *out_wav_file, int wav_mode,
                     int track)
;
void get_wav_progress_information(morcego___i___instance__a__bucaneiro_engineering *mv_______,int *por,int *ret, int *fin, char*message_);
#endif