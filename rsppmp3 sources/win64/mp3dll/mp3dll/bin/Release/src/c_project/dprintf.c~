//We don't know who was the original developer of this file (dprintf.c) ...then the copyright is ours
/*
    Copyright (C) <2022>  <BinaryWork Corp.>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU GENERAL PUBLIC LICENSE
	and GNU LESSER GENERAL PUBLIC LICENSE along with this program.
	If not, see <http://www.gnu.org/licenses/>.

    support: http://nomade.sourceforge.net

	direct programmers e-mails:
	MathMan: arsoftware25@gmail.com  ricardo@arsoftware.net.br
	 Amanda: arsoftware10@gmail.com  amanda@arsoftware.net. br

	immediate contact(for a very fast answer) WhatsApp
	(+55)41 9627 1708 - it is always on
*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <errno.h>
#include <fcntl.h>
#include <ctype.h>
#include <math.h>
#include <wctype.h>
#include <wchar.h>
#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <locale.h>
#include <signal.h>
#include <limits.h>
#include <float.h>
#include <iso646.h>

#undef NDEBUG
#include <assert.h>

#ifndef INCLUDEUCHAR
#ifndef uchar
#define uchar unsigned char
#define uint unsigned int
#define ulong unsigned long
#define ushort  unsigned short
#endif
#endif

extern double
inittimer2 (int value);

extern int setdebuginformation (char *string);

void dprintf_z (const char *format, ...);
/**
 * To print an internal debug information

void
indprintff (const char *format, ...)
{
#if 1

	{

		int rete;
		va_list args;
		static char buffer[10000];
		int ret;

		rete = GetLastError ();

		va_start (args, format);
		ret = vsprintf (buffer, format, args);

		setdebuginformation (buffer);

		SetLastError (rete);

	}
#else

	return;
#endif

}
*/
/**
 * To print to the system debugger a string, I use it all the time
 */
void
dprintf_z (const char *format, ...)
{
#ifdef AMANDA_DEBUG_MODE_____S2____
	int rete;
	va_list args;
	char buffer[20000];
	int ret;
	rete = GetLastError ();
	va_start (args, format);
	ret = vsprintf (buffer, format, args);
	OutputDebugString (buffer);
	assert(19999>strlen(buffer));
	printf (buffer);
	SetLastError (rete);
#endif
	return;

}

int __stdcall my_timer (int val, char *filter);
int __stdcall
my_timer (int val, char *filter)
{
	if (0 == val)
	{
		inittimer2 (0);
	}
	else
	{
		dprintf_z ("tempo decorrido %f - %s\n", inittimer2 (1), filter);
	}
	return 0;
}
