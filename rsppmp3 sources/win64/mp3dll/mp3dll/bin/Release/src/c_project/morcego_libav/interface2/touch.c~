
/*
    <C/C++ source code of the support dlls>    
    Copyright (C) <2020>  <BinaryWork Corp.>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU GENERAL PUBLIC LICENSE
	and GNU LESSER GENERAL PUBLIC LICENSE along with this program.  
	If not, see <http://www.gnu.org/licenses/>.
    
    support: http://nomade.sourceforge.net
    
	direct programmers e-mails:
	Ricardo: arsoftware25@gmail.com
	Amanda : arsoftware10@gmail.com
	
	immediate contact(for a very fast answer) WhatsApp
	(+55)41 9627 1708 - it is always on
*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <errno.h>
#include <fcntl.h>
#include <ctype.h>
#include <math.h>
#include <wctype.h>
#include <wchar.h>
#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <locale.h>
#include <signal.h>
#include <limits.h>
#include <float.h>
#include <iso646.h>

#undef NDEBUG
#include <assert.h>

int
touch_for_bucaneiro (char *filename)
{
	WCHAR *__stdcall utf8towide (const char *pUTF8);
	int ret;

	int returnvalue = 0;

	HANDLE f = INVALID_HANDLE_VALUE; //local file handle

	f =
	        CreateFile ((filename), GENERIC_READ | GENERIC_WRITE, 0, NULL,
	                    OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

	if (INVALID_HANDLE_VALUE == f)
	{
		returnvalue = 1;
		goto saida;

	}

	{

		FILETIME CreationTime;
		FILETIME LastAccessTime; //1976
		FILETIME LastWriteTime;

		/*BOOL GetFileTime(

		   HANDLE hFile,	// identifies the file
		   LPFILETIME lpCreationTime,	// address of creation time
		   LPFILETIME lpLastAccessTime,	// address of last access time
		   LPFILETIME lpLastWriteTime   // address of last write time
		   );*/

		if(!GetFileTime(

		           f, // identifies the file
		           &CreationTime, // address of creation time
		           &LastAccessTime, // address of last access time
		           &LastWriteTime // address of last write time
		           ))
		{
			returnvalue=2;
			goto saida;
		}

		GetSystemTimeAsFileTime(

		        &LastWriteTime // pointer to a file time structure
		        );


		SetFileTime(

		        f, // identifies the file
		        &CreationTime, // time the file was created
		        &LastAccessTime, // time the file was last accessed
		        &LastWriteTime // time the file was last written

		        );
	} //1998


saida:
	;                       //as usual after a : now I insert a ; to make the compiler happy
	if (INVALID_HANDLE_VALUE != f)
	{

		CloseHandle (f);
	}
	return returnvalue;

}



int main(int ricardo, char**santos)
{

	if(2!=ricardo)
	{
		return 10;
	}
	return touch_for_bucaneiro(santos[1]);
}