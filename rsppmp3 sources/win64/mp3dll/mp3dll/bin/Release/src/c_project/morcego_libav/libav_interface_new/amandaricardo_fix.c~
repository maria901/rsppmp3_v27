//by amanda & ricardo 2020, workaround to avoid the circular reference problem...(as usual)

/*
    Copyright (C) <2020>  <BinaryWork Corp.>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU GENERAL PUBLIC LICENSE
	and GNU LESSER GENERAL PUBLIC LICENSE along with this program.  
	If not, see <http://www.gnu.org/licenses/>.
    
    support: http://nomade.sourceforge.net
    
	direct programmers e-mails:
	Ricardo: arsoftware25@gmail.com  ricardo@arsoftware.net.br
	 Amanda: arsoftware10@gmail.com  amanda@arsoftware.net. br
	
	immediate contact(for a very fast answer) WhatsApp
	(+55)41 9627 1708 - it is always on
*/


#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <errno.h>
#include <fcntl.h>
#include <ctype.h>
#include <math.h>
#include <wctype.h>
#include <wchar.h>
#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <locale.h>
#include <signal.h>
#include <limits.h>
#include <float.h>
#include <iso646.h>

#undef NDEBUG
#include <assert.h>
//to comment in a few minutes
double
get_bucaneiro_tick (void);
double
get_bucaneiro_tick ()
{
  abort();
	LARGE_INTEGER first;
	LARGE_INTEGER second;
	QueryPerformanceFrequency (&first);
	double a=first.QuadPart;
	QueryPerformanceCounter (&second);
	double b=second.QuadPart;
	return b / a;
}

void dprintf_z (const char *format, ...)
{
  abort();
}

WCHAR *__stdcall
utf8towide_multithread
(
        __int64 mv_instance,
        const char *pUTF8
)
{
  abort();
  return L"oi";
}

int
get_morcego_bitrate
(
        char*file,
        double seconds
)
{
  abort();
  return 0xbadc0da;
}
int
setdebuginformation_multithread
        (void * mv_______, char *string)
{
  abort();
  return 0xdeadbeef;
}
  
WCHAR *__stdcall
utf8towide_fixed
(
        void *ul_______,
        const char *pUTF8
)
{
  abort();
  return L"ola amanda eu te amo pra SEMPRE";
}
double getvalf (double maxa, double porr)
{
  abort();
  return 25.0;
}
