// Allpass filter declaration
//
// Written by Jezar at Dreampoint, June 2000
// http://www.dreampoint.co.uk
// This code is public domain
/*
    <C/C++ source code of the support dlls>    
    Copyright (C) <2020>  <BinaryWork Corp.>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU GENERAL PUBLIC LICENSE
	and GNU LESSER GENERAL PUBLIC LICENSE along with this program.  
	If not, see <http://www.gnu.org/licenses/>.
    
    support: http://nomade.sourceforge.net
    
	direct programmers e-mails:
	Ricardo: arsoftware25@gmail.com
	Amanda : arsoftware10@gmail.com
	
	immediate contact(for a very fast answer) WhatsApp
	(+55)41 9627 1708 - it is always on
*/

#ifndef _allpass_
#define _allpass_
#include "denormals.h"

class allpass
{
public:
  allpass ();
  void setbuffer (float *buf, int size);
  inline float process (float inp);
  void mute ();
  void setfeedback (float val);
  float getfeedback ();
// private:
  float feedback;
  float *buffer;
  int bufsize;
  int bufidx;
};


// Big to inline - but crucial for speed

inline float
allpass::process (float input)
{
  float output;
  float bufout;

  bufout = buffer[bufidx];
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
  undenormalise (bufout);
#pragma GCC diagnostic pop
  output = -input + bufout;
  buffer[bufidx] = input + (bufout * feedback);

  if (++bufidx >= bufsize)
    bufidx = 0;

  return output;
}

#endif //_allpass

//ends
